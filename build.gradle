import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE' apply false
    id 'org.ec4j.editorconfig' version '0.0.3'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    version = '0.2-SNAPSHOT'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven {
            url 'https://repo.gradle.org/gradle/libs-releases'
        }
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencies {
        // Spring Boot starter
        implementation('org.springframework.boot:spring-boot-starter')
        implementation('org.springframework.boot:spring-boot-starter-web')
        // Spring logging
        implementation('org.springframework.boot:spring-boot-starter-logging')

        // JavaPoet
        implementation('com.squareup:javapoet:1.11.1')

        // Lombok
//    compileOnly('org.projectlombok:lombok')
//    annotationProcessor('org.projectlombok:lombok')

        // Gradle tooling API
        implementation group: 'org.gradle', name: 'gradle-tooling-api', version: '5.0'
        testImplementation group: 'org.gradle', name: 'gradle-tooling-api', version: '5.0'
        // Gradle sources (will be removed)
        runtimeOnly group: 'org.gradle', name: 'gradle-core', version: '5.0'
        runtimeOnly group: 'org.gradle', name: 'gradle-wrapper', version: '5.0'

        // Testing
        //
        // Spring testing
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        // Spock
        testImplementation('org.spockframework:spock-core:1.3-groovy-2.5')
        testImplementation('org.spockframework:spock-spring:1.3-groovy-2.5')

        // Development tools
        annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
        compile('org.springframework.boot:spring-boot-devtools')
    }

    sourceSets {
        // integration tests
        integrationTest {
            groovy.srcDir file('src/integration-test/groovy')
            resources.srcDir file('src/integration-test/resources')

//            compileClasspath += main.output + test.output
//            runtimeClasspath += main.output + test.output
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
        }
    }

    configurations {
        // IT
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        mustRunAfter test
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all"
    }

    jacocoTestReport {
        getExecutionData().setFrom(fileTree(dir: 'build/jacoco', include: '**/*.exec'))
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    editorconfig {
        excludes = ['**/gradlew.bat', '**/out/']
    }

    check.dependsOn integrationTest
    check.dependsOn jacocoTestReport
    check.dependsOn editorconfigCheck
    install.dependsOn build
}

wrapper {
    gradleVersion = '5.6.4'
    distributionType = Wrapper.DistributionType.ALL
}
